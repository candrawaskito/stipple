/// A robust and well supported down-n-dirty gradient mixin.
///
/// @param {Color} $start-color - The starting color in the gradient.
/// @param {Color} $end-color - The ending color in the gradient.
/// @param {String|Angle} $orientation [horizontal] - The direction of the
/// grandient.
/// @param {Percentage} $start-percent [0%] - Starting percentage of the gradient.
/// @param {Percentage} $end-percent [100%] - Ending percentage of the gradient.
///
/// @group Utilities
/// @throw Invalid $orientation value
/// @throw Invalid $start-percent data type
/// @throw Invalid $start-percent unit type
/// @throw Invalid $end-percent data type
/// @throw Invalid $end-percent unit type
/// @throw Value of $start-percent out of range
/// @throw Value of $end-percent out of range
=gradient($start-color, $end-color, $orientation: horizontal, $start-percent: 0%, $end-percent: 100%)
  $vertical: false

  @if type-of($start-percent) != 'number' or type-of($end-percent) != 'number'
    @error 'Invalid data type entered for the values in the `gradient()` mixin. If you pass values for the `$start-percent` or `$end-percent` parameters, you must pass percentage values. You passed `#{inspect($start-percent)}` for `$start-percent` and `#{inspect($end-percent)}` for `$end-percent`.'

  @if unitless($start-percent)
    $start-percent: $start-percent * 1%

  @if unitless($end-percent)
    $end-percent: $end-percent * 1%

  @if unit($start-percent) != '%' or unit($end-percent) != '%'
    @error 'Invalid units entered for the values in the `gradient()` mixin. If you pass values for the `$start-percent` or `$end-percent` parameters, you must pass percentage values. You passed `#{inspect($start-percent)}` for `$start-percent` and `#{inspect($end-percent)}` for `$end-percent`.'

  @if $start-percent < 0% or $start-percent > 100%
    @error 'Invalid $start-percent value of `#{inspect($start-percent)}` for the `gradient` mixin. The value is out of range.'

  @if $end-percent < 0% or $end-percent > 100%
    @error 'Invalid $end-percent value of `#{inspect($end-percent)}` for the `gradient` mixin. The value is out of range.'

  background: $start-color

  @if $orientation == 'vertical' or $orientation == 'vert' or $orientation == 'v' or $orientation == 'down' or $orientation == 'd' or $orientation == 'bottom' or $orientation == 'to bottom' or $orientation == 'top' or $orientation == 'top to bottom'
    $vertical: true

    background: -moz-linear-gradient(top, $start-color $start-percent, $end-color $end-percent)
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $start-color), color-stop($end-percent, $end-color))
    background: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent)
    background: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent)
    filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$start-color}',endColorstr='#{$end-color}',GradientType=0)")
  @else if $orientation == 'horizontal' or $orientation == 'horiz' or $orientation == 'h' or $orientation == 'right' or not $orientation or $orientation == 'to right' or $orientation == 'left' or $orientation == 'left to right'
    background: -moz-linear-gradient(left, $start-color $start-percent, $end-color $end-percent)
    background: -webkit-gradient(linear, left top, right top, color-stop(0%, $start-color), color-stop($end-percent, $end-color))
    background: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent)
    background: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent)
  @else if $orientation == 'radial' or $orientation == 'rad' or $orientation == 'r' or $orientation == 'circular' or $orientation == 'circle'
    background: -moz-radial-gradient(center, ellipse cover, $start-color $start-percent, $end-color $end-percent)
    background: -webkit-gradient(radial, center center, 0px, center center, $end-percent, color-stop(0%, $start-color), color-stop($end-percent, $end-color))
    background: -webkit-radial-gradient(center, ellipse cover, $start-color $start-percent, $end-color $end-percent)
    background: radial-gradient(ellipse at center, $start-color $start-percent, $end-color $end-percent)
  @else if $orientation == 'diagonal' or $orientation == 'diag' or $orientation == 'd' or $orientation == 'd1' or $orientation == 'diagonal1' or $orientation == 'diag1'
    background: -moz-linear-gradient(45deg, $start-color $start-percent, $end-color $end-percent)
    background: -webkit-linear-gradient(45deg, $start-color $start-percent, $end-color $end-percent)
    background: linear-gradient(45deg, $start-color $start-percent, $end-color $end-percent)
  @else if $orientation == 'diagonal2' or $orientation == 'diag2' or $orientation == 'd2'
    background: -moz-linear-gradient(-45deg, $start-color $start-percent, $end-color $end-percent)
    background: -webkit-linear-gradient(-45deg, $start-color $start-percent, $end-color $end-percent)
    background: linear-gradient(135deg, $start-color $start-percent, $end-color $end-percent)
  @else if is-number($orientation) and index('deg' 'rad' 'grad' 'turn', unit($orientation))
    background: -moz-linear-gradient($orientation, $start-color $start-percent, $end-color $end-percent)
    background: -webkit-linear-gradient($orientation, $start-color $start-percent, $end-color $end-percent)
    background: linear-gradient($orientation, $start-color $start-percent, $end-color $end-percent)
  @else
    @error 'Invalid $orientation value of `#{inspect($orientation)}` for the `gradient` mixin.'

  @if not $vertical
    filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$start-color}',endColorstr='#{$end-color}',GradientType=1)")
