/// Takes a character or a string representation for the name of a character
/// and returns the CSS hex code for that character.
/// @access public
///
/// @example char('&') returns '\0026' and char('tm') returns '\2122'
///
/// @param {String} $char - The character (if it is available on a standard
/// keyboard) or name of the character being converted into a CSS hex code.
@function char($char) {
  $code: '\0020'; // Code for a blank space

  @if type-of($char) != 'string' {
    @error 'Value of $char for char() must be a valid string.';
  }

  $char: to-lower-case($char);

  @if $char == '&' or str-slice($char, 1, 3) == 'amp' {
    $code: '\0026'; // Ampersand: &
  } @else if str-slice($char, 1, 4) == 'copy' or $char == 'cr' {
    $code: '\00A9'; // Copyright: ©
  } @else if str-slice($char, 1, 3) == 'reg' or $char == 'rtm' {
    $code: '\00AE'; // Registered: ®
  } @else if str-slice($char, 1, 5) == 'trade' or $char == 'tm' {
    $code: '\2122'; // Trademark: ™
  } @else if $char == '$' or $char == 'dollar' or $char == 'dlr' {
    $code: '\0024'; // Dollar: $
  } @else if $char == 'cents' or $char == 'cent' {
    $code: '\00A2'; // Cents: ¢
  } @else if (str-slice($char, 1, 4) == 'euro' or $char == 'eu') {
    $code: '\20AC'; // Euro: €
  } @else if (str-slice($char, 1, 5) == 'pound' or $char == 'gbp') {
    $code: '\00A3'; // British Pound: £
  } @else if $char == 'yen' {
    $code: '\00A5'; // Japanese Yen ¥
  } @else if $char == 'rupee' {
    $code: '\20B9'; // Indian Rupee ₹
  } @else if $char == 'peso' {
    $code: '\20B1'; // Mexican Peso ₱
  } @else if $char == 'currency' or $char = 'curr' {
    $code: '\00A4'; // Universal currency symbol ¤
  } @else if ($char == 'open-quote' or $char == 'openquote'
      or $char == 'oquote' or $char == 'o-quote' or $char == 'oq'
      or $char == 'o"' or $char == 'o\'') {
    $code: '\201C'; // Open double quote: “
  } @else if (
    $char == 'close-quote' or $char == 'closed-quote' or
    $char == 'closequote' or $char == 'closedquote' or $char == 'cquote' or
    $char == 'c-quote' or $char == 'cq' or $char == 'c"'
  ) {
    $code: '\201D'; // Close double quote: ”
  } @else if (
    $char == 'ldaq' or $char == 'left-double-angle-quote' or
    $char == 'left-double-angle' or $char == 'ldang'
  ) {
    $char: '\00AB'; // Left-pointing double-angle quation mark: «
  } @else if (
    $char == 'rdaq' or $char == 'right-double-angle-quote' or
    $char == 'rdang' or $char == 'right-double-angle'
  ) {
    $char: '\00BB'; // Right-pointing double-angle quation mark: »
  } @else if str-slice($char, 1, 4) == 'apos' $char == '\'' or $char == 'aps' {
    $code: '\2019'; // Apostrophe: ’
  } @else if $char == 'ndash' or $char == 'nd' {
    $code: '\2013'; // En dash: –
  } @else if $char == '--' or $char == 'mdash' or $char == 'md' {
    $code: '\2014'; // Em dash: —
  } @else if (
    $char == '...' or str-slice($char, 1, 5) == 'ellip' or
    str-slice($char, 1, 4) == 'elip'
  ) {
    $code: '\2026'; // Ellipsis: …
  } @else if (
    $char == '>' or $char == 'greater-than' or $char == 'greaterthan' or
    $char == 'greater-then' or $char == 'greaterthen'
  ) {
    $code: '\003E'; // Greater than symbol: >
  } @else if (
    $char == '<' or $char == 'less-than' or $char == 'lessthan' or
    $char == 'less-then' or $char == 'less-then'
  ) {
    $code: '\003C'; // Less than symbol: <
  } @else if (
    $char == '^!' or $char == 'inverted-exclamation' or
    $char == 'inverted!' or $char == 'invert!' or $char == 'inv!'
  ) {
    $char: '\00A1'; // Inverted exclamation mark ¡
  } @else if (
    $char == 'account-of' or $char == 'accountof' or $char == 'accof' or
    $char == 'account' or $char == 'acc'
  ) {
    $char: '\2100'; // Account Of: ℀
  } @else if str-slice($char, 1, 7) == 'address') {
    $char: '\2101'; // Addressed to the subject of: ℁
  } @else if $char == 'degree' or $char == 'degrees' or $char == 'deg' {
    $char: '\00B0'; // Degrees: °
  } @else if (
    $char == 'degrees-celcius' or $char == 'degree-celcius' or
    $char == 'degreescelcius' or $char == 'degreecelcius' or
    $char == 'celcius' or $char == 'degcel' or $char == 'deg-cel' or
    $char == 'degree-c' or $char == 'degrees-c' or $char == 'deg-c' or
    $char == 'degc'
  ) {
    $char: '\2103'; // Degrees Celcius: ℃
  } @else if (
    $char == 'degrees-farenheit' or $char == 'degree-farenheit' or
    $char == 'degreesfarenheit' or $char == 'degreefarenheit' or
    $char == 'farenheit' or $char == 'faren' or $char == 'degfar' or
    $char == 'deg-far' or $char = 'deg-faren' or $char == 'deg-f' or
    $char == 'degree-f' or $char == 'degrees-f' or $char == 'degf'
  ) {
    $char: '\2109'; // Degrees Celcius: ℉
  } @else if $char == 'infinity' or $char == 'inf' {
    $char: '\221E'; // Infinity: ∞
  } @else if $char == 'nbsp' or $char == 'nobreakspace' {
    $code: '\00A0'; // Non-breaking space
  } @else if ($char != ' ') {
    @error 'You must enter a valid character code $char in char(), ' +
        'one that corresponds with a CSS entity character code.';
  }

  @return $code;
}
